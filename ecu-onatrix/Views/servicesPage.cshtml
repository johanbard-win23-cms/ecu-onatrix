@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage;
@{
	Layout = "mainLayout.cshtml";
    ViewBag.Title = Model.Value("pageTitle") ?? null;
    ViewBag.Motto = Model.Value("pageMotto") ?? null;

    var pageHeading = Model?.Value<string>("pageHeading");

    var selection = Umbraco.Content(Guid.Parse("82826748-87e0-4e6f-be29-0e5ff8d858be"))
    .ChildrenOfType("serviceItemTemplate")
    .Where(x => x.IsVisible())
    .OrderBy(x => x.CreateDate);

    var itemsPerPage = 6;

    if (!int.TryParse(Context.Request.Query["page"], out int currentPage))
        currentPage = 1;

    var totalItems = selection?.Count() ?? 0;
    var pagedItems = selection.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage);
}

@await Html.PartialAsync("static/pageTop")

<section class="our-services">
    <div class="w-full d-flex center container">
        <div class="w-max box">
            <h2 class="w-half">@pageHeading</h2>
            <div class="card-box">
                @if (pagedItems != null)
                {
                    @foreach (var item in pagedItems) 
                    {
                        var thumbnailImage = item?.Value<IPublishedContent>("thumbnailImage")?.Url() ?? "";
                        var preamble = item?.Value<string>("preamble") ?? "";
                    
                        <a href="@item.Url()">
                            <div class="card">
                                <div class="card-title h5">@item.Name</div>
                                <div class="img-wrapper">
                                    <img src="@thumbnailImage" alt="@item.Name" class="card-img">
                                </div>
                                <p class="card-text">@preamble</p>
                            </div>
                        </a>
                    }
                }
            </div>
            @if (totalItems > itemsPerPage) 
            {
                <div class="pagination d-flex center" style="gap: 1rem;">

                    @if (currentPage > 1)
                    {
                        <a href="?page=@(currentPage - 1)" class="change">PREV</a>
                    }
                    else
                    {
                        <span class="change inactive">PREV</span>
                    }

                    @for (int i = 1; i <= Math.Ceiling((decimal)totalItems / itemsPerPage); i++)
                    {
                        <div class="@((i == currentPage) ? "number active" : "number")">
                            <a href="?page=@i">@(i)</a>
                        </div >
                    }

                    @if (currentPage < Math.Ceiling((decimal)totalItems / itemsPerPage))
                    {
                        <a href="?page=@(currentPage + 1)" class="change">NEXT</a>
                    }
                    else
                    {
                        <span class="change inactive">NEXT</span>
                    }

                </div>
            }
        </div>
    </div>
</section>

@await Html.GetBlockGridHtmlAsync(Model, "pageBottomLayout")